name: preview

on:
  workflow_run:
    workflows: ["build"]
    types:
      - completed

permissions:
  contents: read
  pull-requests: write

jobs:
  preview:
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.event == 'pull_request' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v1

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ github.event.workflow_run.id }}
          path: ./dist
          run-id: ${{ github.event.workflow_run.id }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Find PR number
        id: pr
        uses: actions/github-script@v7
        with:
          retries: 3
          script: |
            const response = await github.rest.search.issuesAndPullRequests({
              q: 'repo:${{ github.repository }} is:pr sha:${{ github.event.workflow_run.head_sha }}',
              per_page: 1,
            })
            const items = response.data.items
            if (items.length < 1) {
              console.error('No PRs found')
              return
            }
            const pullRequestNumber = items[0].number
            console.info('Pull request number is', pullRequestNumber)
            return pullRequestNumber

      # - name: Deploy to Cloudflare Pages
      #   uses: cloudflare/wrangler-action@v3
      #   with:
      #     accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      #     apiToken: ${{ secrets.CLOUDFLARE_PAGES_TOKEN }}
      #     command: pages deploy dist --project-name=connect --branch=${{ steps.pr.outputs.result }} --commit-dirty=true

      - name: take screenshots
        run: |
          bun install --frozen-lockfile
          bun playwright install chromium
          bun run dev &
          while ! curl http://localhost:3000; do sleep 0.5; done > /dev/null
          node src/ci/screenshots.cjs http://localhost:3000
          kill -9 $(lsof -t -i:3000)

      - name: upload screenshots to commaai/ci-artifacts
        run: |
          touch ~/.ssh/deploy_key
          cat <<EOF > ~/.ssh/deploy_key
          ${{ secrets.CI_ARTIFACTS_DEPLOY_KEY }}
          EOF
          cat <<EOF > ~/.ssh/config
          Host github.com
            HostName github.com
            User git
            IdentityFile ~/.ssh/deploy_key
          EOF
          chmod 600 ~/.ssh/deploy_key

          git clone --depth 1 git@github.com:signed-long/ci-artifacts.git
          mv screenshots ci-artifacts/new-connect/
          cd ci-artifacts
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"
          git checkout -B new-connect-pr-${{ steps.pr.outputs.result }}
          git add new-connect/screenshots
          git commit -m "screenshots for PR ${{ steps.pr.outputs.result }}
          git push --set-upstream origin new-connect-pr-${{ steps.pr.outputs.result }}

      - name: build screenshot urls in markdown
        id: ss_urls
        run: |
          for img in dist/images/*.playwright.png; do
            img=$(basename $img)
            md_links="$md_links<br/>![${img}](https://raw.githubusercontent.com/commaai/ci-artifacts/new-connect-pr-${{ steps.pr.outputs.result }}/new-connect/screenshots/${img})"
          done
          echo "md_links=$md_links" >> $GITHUB_OUTPUT

      - name: Comment URL on PR
        uses: thollander/actions-comment-pull-request@v2
        with:
          message: |
            <!-- _(run_id **${{ github.run_id }}**)_ -->
            Welcome to new-connect! Make sure to:
            * read the [contributing guidelines](https://github.com/commaai/new-connect?tab=readme-ov-file#contributing)
            * mark your PR as a draft until it's ready to review
            * post the preview on [Discord](https://discord.comma.ai); feedback from users will speedup the PR review

            deployed preview: https://${{ steps.pr.outputs.result }}.connect-d5y.pages.dev
            Screenshots:
            ${{ steps.ss_urls.outputs.md_links }}
          comment_tag: run_id
          pr_number: ${{ steps.pr.outputs.result }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

